#!/usr/bin/env python

'''Adocb - AsciiDoc Builder'''

__copyright__ = '''\
Copyright (C) 2016  Volker Diels-Grabsch <v@njh.eu>

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
'''

import errno
import os
import re
import subprocess
import sys
import tempfile

def makedirs_exist_ok(name, mode):
    # Portability with Python 2, see http://stackoverflow.com/a/600612
    try:
        os.makedirs(name, mode)
    except OSError as e:
        if e.errno == errno.EEXIST and os.path.isdir(name):
            pass
        else:
            raise

def gem_install(gemdir, packages, pre):
    args = [
        'gem',
        'install',
        '--install-dir',
        gemdir,
        '--bindir',
        os.path.join(gemdir, 'bin'),
        '--no-rdoc',
        '--no-ri',
    ]
    if pre:
        args.append('--pre')
    for package in packages:
        args.append(package)
    subprocess.check_call(args)

def create_gemdir(gemdir, packages, pre_packages):
    if os.path.exists(gemdir):
        return
    parentdir, dirname = os.path.split(gemdir)
    prefix = '{}.temp.'.format(dirname)
    makedirs_exist_ok(parentdir, 0o700)
    temp_gemdir = tempfile.mkdtemp(suffix='', prefix=prefix, dir=parentdir)
    gem_install(temp_gemdir, packages, pre=False)
    gem_install(temp_gemdir, pre_packages, pre=True)
    os.rename(temp_gemdir, gemdir)

def get_output_name_path(filepath):
    with open(filepath, 'rb') as f:
        data = f.read()
    m = re.search(r'^:output:\s*(\S+)$', data, re.MULTILINE)
    if m is None:
        return os.path.splitext(os.path.basename(filepath))[0]
    output_name_path = m.group(1)
    output_suffix = os.path.splitext(output_name_path)[1]
    if output_suffix != '':
        raise ValueError('Output filename must be specified without suffix: {!r}'.format(output_name_path))
    return output_name_path

def asciidoctor(gemdir, output_format, filepath):
    if output_format == 'html':
        output_suffix = '.html'
        backend = 'html'
    elif output_format == 'pdf':
        output_suffix = '.pdf'
        backend = 'pdf'
    else:
        raise ValueError('Invalid output format: {!r}'.format(output_format))
    filedir, filename = os.path.split(os.path.abspath(filepath))
    output_name_path = get_output_name_path(filepath)
    outputpath = os.path.join(filedir, output_name_path) + output_suffix
    # Use the "asciidoctor-pdf" command line tool for both, HTML and PDF
    asciidoctor_pdf_path = os.path.join(gemdir, 'bin', 'asciidoctor-pdf')
    args = [
        asciidoctor_pdf_path,
        '-b',
        backend,
        '-r',
        'asciidoctor-diagram',
        '--out-file',
        outputpath,
        '--',
        filename,
    ]
    env = {
        'GEM_HOME': gemdir,
        'LC_ALL': 'en_US.UTF-8',
        'PATH': os.getenv('PATH'),
    }
    subprocess.check_call(args, cwd=filedir, env=env)

def build_doc(rootdir, output_format, filepath):
    gemdir = os.path.join(rootdir, 'var', 'gem')
    create_gemdir(
        gemdir,
        packages=[
            'asciidoctor',
            'asciidoctor-diagram',
            'coderay',
        ],
        pre_packages=[
            'asciidoctor-pdf',
        ],
    )
    asciidoctor(gemdir, output_format, filepath)

def check_graphviz():
    try:
        args = [
            'dot',
            '-V',
        ]
        env = {
            'LC_ALL': 'en_US.UTF-8',
            'PATH': os.getenv('PATH'),
        }
        output = subprocess.check_output(args, env=env, stderr=subprocess.STDOUT)
    except Exception as e:
        raise RuntimeError('Unable to find the "dot" tool. Please install Graphviz:\n\nhttp://www.graphviz.org/\n')

usage = '''
Usage:

    {name} FORMAT FILE.adoc

Examples:

    {name} html mydoc.adoc
    {name} pdf  mydoc.adoc

'''

def main():
    rootdir = os.path.abspath(os.path.dirname(__file__))
    check_graphviz()
    args = sys.argv[1:]
    if len(args) == 2:
        output_format, filepath = args
        build_doc(rootdir, output_format, filepath)
        return
    sys.stdout.write(usage.format(name=sys.argv[0]))
    sys.exit(1)

if __name__ == '__main__':
    main()
